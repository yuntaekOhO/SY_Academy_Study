/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.63
 * Generated at: 2022-07-01 01:57:57 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.ch10_002dajax;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class s06_005fmember_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>회원 정보 관리</title>\r\n");
      out.write("<style type=\"text/css\">\r\n");
      out.write("	form{\r\n");
      out.write("		width: 500px;\r\n");
      out.write("		margin: 10px auto;\r\n");
      out.write("	}\r\n");
      out.write("	ul{\r\n");
      out.write("		padding: 0;\r\n");
      out.write("		margin: 0;\r\n");
      out.write("		list-style: none;\r\n");
      out.write("	}\r\n");
      out.write("	ul li{\r\n");
      out.write("		padding: 0;\r\n");
      out.write("		margin: 0 0 10px 0;\r\n");
      out.write("	}\r\n");
      out.write("	label{\r\n");
      out.write("		width: 150px;\r\n");
      out.write("		float: left;\r\n");
      out.write("	}\r\n");
      out.write("	table{\r\n");
      out.write("		border: solid 1px gray;\r\n");
      out.write("		width: 500px;\r\n");
      out.write("		margin: 0 auto;\r\n");
      out.write("		border-collapse: collapse;\r\n");
      out.write("	}\r\n");
      out.write("	td{\r\n");
      out.write("		border: solid 1px gray;\r\n");
      out.write("	}\r\n");
      out.write("</style>\r\n");
      out.write("<script type=\"text/javascript\" src=\"../js/jquery-3.6.0.min.js\"></script>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("	$(function(){\r\n");
      out.write("		//목록\r\n");
      out.write("		function selectData(){\r\n");
      out.write("			//서버와 비동기 통신\r\n");
      out.write("			$.ajax({\r\n");
      out.write("				url:'getPeopleJSON.jsp',\r\n");
      out.write("				dataType:'json',\r\n");
      out.write("				cache:false,\r\n");
      out.write("				timeout:30000,\r\n");
      out.write("				success:function(param){\r\n");
      out.write("					//table의 내부 내용물 제거 (초기화)\r\n");
      out.write("					$('#output').empty();\r\n");
      out.write("					\r\n");
      out.write("					$(param).each(function(index,item){\r\n");
      out.write("						let output = '';\r\n");
      out.write("						output += '<tr>';\r\n");
      out.write("						output += '<td>' + item.id + '</td>';\r\n");
      out.write("						output += '<td>' + item.name + '</td>';\r\n");
      out.write("						output += '<td>' + item.job + '</td>';\r\n");
      out.write("						output += '<td>' + item.address + '</td>';\r\n");
      out.write("						output += '<td>' + item.blood_type + '</td>';\r\n");
      out.write("						output += '</tr>';\r\n");
      out.write("						\r\n");
      out.write("						//id가 output인 table 태그의 자식요소로 새로 생성한 태그를 추가\r\n");
      out.write("						$('#output').append(output);\r\n");
      out.write("					}); //end of each\r\n");
      out.write("				},\r\n");
      out.write("				error:function(){ //이 부분이 실행됐을 경우 서버프로그램의 JSON이 잘못됐을 경우가 크다\r\n");
      out.write("								  //이 경우 검사 - consol, eclipse - console에 표시되지 않음\r\n");
      out.write("					alert('네트워크 오류 발생');\r\n");
      out.write("				}\r\n");
      out.write("			});\r\n");
      out.write("		} //end of selectData\r\n");
      out.write("		\r\n");
      out.write("		//submit 이벤트 연결\r\n");
      out.write("		$('#insert_form').submit(function(event){\r\n");
      out.write("			//입력 양식의 내용을 요청 매개변수 문자열로 만듬\r\n");
      out.write("			//(파라미터네임과 value의 쌍, 인코딩 처리)\r\n");
      out.write("			let input_data = $(this).serialize();\r\n");
      out.write("			\r\n");
      out.write("			$.ajax({\r\n");
      out.write("				url:'insertPerson.jsp',\r\n");
      out.write("				type:'post',\r\n");
      out.write("				data:input_data,\r\n");
      out.write("				dataType:'json',\r\n");
      out.write("				cache:false,\r\n");
      out.write("				timeout:30000,\r\n");
      out.write("				success:function(param){\r\n");
      out.write("					if(param.result=='success'){\r\n");
      out.write("						alert('회원가입 완료!');\r\n");
      out.write("						//form에 입력된 내용 초기화\r\n");
      out.write("						$('#insert_form input[type=\"text\"]').val('');\r\n");
      out.write("						\r\n");
      out.write("						//목록 호출\r\n");
      out.write("						selectData();\r\n");
      out.write("					}else{ //result==failure\r\n");
      out.write("						alert('회원가입 오류 발생!');\r\n");
      out.write("					}\r\n");
      out.write("				},\r\n");
      out.write("				error:function(){\r\n");
      out.write("					//형식에 맞지않는 데이터 수신\r\n");
      out.write("					alert('네트워크 오류 발생!');\r\n");
      out.write("				}\r\n");
      out.write("			});\r\n");
      out.write("			\r\n");
      out.write("			//기본 이벤트 제거 : submit으로 페이지 이동하는게 아닌 현재 페이지에서 데이터 전송,반영 하기 때문\r\n");
      out.write("			event.preventDefault();\r\n");
      out.write("		});\r\n");
      out.write("		\r\n");
      out.write("		//초기 화면에 목록 표시\r\n");
      out.write("		selectData();\r\n");
      out.write("	});\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<form id=\"insert_form\" method=\"post\">\r\n");
      out.write("	<fieldset>\r\n");
      out.write("		<legend>데이터 추가</legend>\r\n");
      out.write("		<ul>\r\n");
      out.write("			<li>\r\n");
      out.write("				<label for=\"id\">아이디</label>\r\n");
      out.write("				<input type=\"text\" name=\"id\" id=\"id\">\r\n");
      out.write("			</li>\r\n");
      out.write("			<li>\r\n");
      out.write("				<label for=\"name\">이름</label>\r\n");
      out.write("				<input type=\"text\" name=\"name\" id=\"name\">\r\n");
      out.write("			</li>\r\n");
      out.write("			<li>\r\n");
      out.write("				<label for=\"job\">직업</label>\r\n");
      out.write("				<input type=\"text\" name=\"job\" id=\"job\">\r\n");
      out.write("			</li>\r\n");
      out.write("			<li>\r\n");
      out.write("				<label for=\"address\">주소</label>\r\n");
      out.write("				<input type=\"text\" name=\"address\" id=\"address\">\r\n");
      out.write("			</li>\r\n");
      out.write("			<li>\r\n");
      out.write("				<label for=\"blood_type\">혈액형</label>\r\n");
      out.write("				<input type=\"text\" name=\"blood_type\" id=\"blood_type\">\r\n");
      out.write("			</li>\r\n");
      out.write("		</ul>\r\n");
      out.write("		<div align=\"center\">\r\n");
      out.write("			<input type=\"submit\" value=\"추가\">\r\n");
      out.write("		</div>\r\n");
      out.write("	</fieldset>\r\n");
      out.write("</form>\r\n");
      out.write("<table id=\"output\"></table>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
